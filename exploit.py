import itertools
from tkinter import Tk, Canvas, Button, Label, simpledialog

# Initial dot positions relative to a 600x600 canvas (scalable)
DOT_POSITIONS_TEMPLATE = {
    1: (1 / 6, 1 / 6),
    2: (3 / 6, 1 / 6),
    3: (5 / 6, 1 / 6),
    4: (1 / 6, 3 / 6),
    5: (3 / 6, 3 / 6),
    6: (5 / 6, 3 / 6),
    7: (1 / 6, 5 / 6),
    8: (3 / 6, 5 / 6),
    9: (5 / 6, 5 / 6)
}

class LockPatternViewer:
    def __init__(self, root, canvas_size):
        self.root = root
        self.root.title("Lock Pattern Viewer")

        # Create the canvas based on user-specified size
        self.canvas_size = canvas_size
        self.dot_radius = canvas_size // 30  # Adjust dot size relative to canvas size
        self.canvas = Canvas(root, width=canvas_size, height=canvas_size, bg="white")
        self.canvas.pack()

        # "Previous" and "Next" buttons
        self.previous_button = Button(root, text="Previous", command=self.display_previous_pattern)
        self.previous_button.pack(side="left")

        self.next_button = Button(root, text="Next", command=self.display_next_pattern)
        self.next_button.pack(side="right")

        # Label to display current pattern number
        self.pattern_label = Label(root, text="")
        self.pattern_label.pack()

        # Adjust dot positions based on canvas size
        self.dots_positions = {k: (int(x * canvas_size), int(y * canvas_size))
                               for k, (x, y) in DOT_POSITIONS_TEMPLATE.items()}

        # Generate and store all patterns in a list
        self.patterns = list(self.generate_patterns())
        self.current_index = 0
        self.display_pattern(self.current_index)

    def draw_pattern(self, pattern):
        # Clear the canvas
        self.canvas.delete("all")

        # Draw the dots
        for pos in self.dots_positions.values():
            self.canvas.create_oval(pos[0] - self.dot_radius, pos[1] - self.dot_radius,
                                    pos[0] + self.dot_radius, pos[1] + self.dot_radius,
                                    fill="black")

        # Draw the lines between dots according to the pattern
        for i in range(len(pattern) - 1):
            start_pos = self.dots_positions[pattern[i]]
            end_pos = self.dots_positions[pattern[i + 1]]
            self.canvas.create_line(start_pos[0], start_pos[1],
                                    end_pos[0], end_pos[1],
                                    fill="blue", width=5)

    def display_pattern(self, index):
        # Display the pattern at the given index
        pattern = self.patterns[index]
        self.draw_pattern(pattern)
        self.update_pattern_label()
        self.update_buttons_state()

    def display_next_pattern(self):
        # Move to the next pattern, if available
        if self.current_index < len(self.patterns) - 1:
            self.current_index += 1
            self.display_pattern(self.current_index)

    def display_previous_pattern(self):
        # Move to the previous pattern, if available
        if self.current_index > 0:
            self.current_index -= 1
            self.display_pattern(self.current_index)

    def update_buttons_state(self):
        # Enable or disable buttons based on current index
        self.previous_button.config(state="normal" if self.current_index > 0 else "disabled")
        self.next_button.config(state="normal" if self.current_index < len(self.patterns) - 1 else "disabled")

    def update_pattern_label(self):
        # Update label to show the current pattern number out of total
        self.pattern_label.config(text=f"Pattern {self.current_index + 1} of {len(self.patterns)}")

    def generate_patterns(self):
        # Generate all possible patterns, filtering unique patterns (without revisits)
        for length in range(4, 10):  # Lock patterns are between 4 and 9 dots
            for pattern in itertools.permutations(range(1, 10), length):
                yield pattern

# Ask user for canvas size
root = Tk()
canvas_size = simpledialog.askinteger("Canvas Size", "Enter canvas size (e.g., 600 for 600x600):", minvalue=300, maxvalue=1000)
if canvas_size:
    viewer = LockPatternViewer(root, canvas_size)
    root.mainloop()
